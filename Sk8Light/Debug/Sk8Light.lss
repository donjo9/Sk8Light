
Sk8Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000001e2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800064  00800064  0000027a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009df  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001de  00000000  00000000  00000a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000013e  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001ca  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000044  00000000  00000000  00000f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000158  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000024  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 ee       	ldi	r30, 0xE2	; 226
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a4 36       	cpi	r26, 0x64	; 100
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a4 e6       	ldi	r26, 0x64	; 100
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a8 36       	cpi	r26, 0x68	; 104
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	25 d0       	rcall	.+74     	; 0x9c <main>
  52:	c5 c0       	rjmp	.+394    	; 0x1de <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <UpdateValues>:
	
}

void UpdateValues()
{
	OCR0A = RedValue; //Rød Diode
  56:	80 91 64 00 	lds	r24, 0x0064
  5a:	89 bd       	out	0x29, r24	; 41
	OCR0B = GreenValue; //Grøn Diode
  5c:	80 91 62 00 	lds	r24, 0x0062
  60:	88 bd       	out	0x28, r24	; 40
	OCR1B = BlueValue; //Blå Diode
  62:	80 91 60 00 	lds	r24, 0x0060
  66:	8b bd       	out	0x2b, r24	; 43
  68:	08 95       	ret

0000006a <init>:



void init()
{
	DDRB |= RedLED | GreenLED | BlueLED;
  6a:	87 b3       	in	r24, 0x17	; 23
  6c:	8b 60       	ori	r24, 0x0B	; 11
  6e:	87 bb       	out	0x17, r24	; 23
	
	GTCCR |= TSM; //Stopper Timers under init
  70:	8c b5       	in	r24, 0x2c	; 44
  72:	87 60       	ori	r24, 0x07	; 7
  74:	8c bd       	out	0x2c, r24	; 44
	
	TCCR0A |= (1<<COM0A0) | (1<<COM0B0) | (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);
  76:	8a b5       	in	r24, 0x2a	; 42
  78:	83 6f       	ori	r24, 0xF3	; 243
  7a:	8a bd       	out	0x2a, r24	; 42
					//Slukker Dioder i Bund og tænder ved Compare Match
					//WGM = Fast PWM opdatering @ BOTTOM, TOV @ MAX
	TCCR0B |= (1<<CS01) | (1<<CS00); //Prescale = 64, overflow med 500Hz
  7c:	83 b7       	in	r24, 0x33	; 51
  7e:	83 60       	ori	r24, 0x03	; 3
  80:	83 bf       	out	0x33, r24	; 51
	
	TCCR1 |= (1<<CS12) | (1<<CS11) | (1<<CS10); //Prescale = 64, overflow med 500Hz
  82:	80 b7       	in	r24, 0x30	; 48
  84:	87 60       	ori	r24, 0x07	; 7
  86:	80 bf       	out	0x30, r24	; 48
	GTCCR |= (1<<PWM1B) | (1<<COM1B0); //Enable PWM B, //Slukker Dioder i Bund og tænder ved Compare Match
  88:	8c b5       	in	r24, 0x2c	; 44
  8a:	80 65       	ori	r24, 0x50	; 80
  8c:	8c bd       	out	0x2c, r24	; 44
	OCR1C = 0xFF; //Sætter Max på Timer1 til 0xFF
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	8d bd       	out	0x2d, r24	; 45
	
	UpdateValues(); //Sætter Overflow Compare Registre
  92:	e1 df       	rcall	.-62     	; 0x56 <UpdateValues>
	GTCCR &= ~TSM; //Starter Timers efter init
  94:	8c b5       	in	r24, 0x2c	; 44
  96:	88 7f       	andi	r24, 0xF8	; 248
  98:	8c bd       	out	0x2c, r24	; 44
  9a:	08 95       	ret

0000009c <main>:
void init(void);
void UpdateValues(void);

int main(void)
{
	init();
  9c:	e6 df       	rcall	.-52     	; 0x6a <init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8f e6       	ldi	r24, 0x6F	; 111
  a0:	94 e9       	ldi	r25, 0x94	; 148
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x6>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0xc>
  a8:	00 00       	nop
	int counter = 0;
  aa:	c0 e0       	ldi	r28, 0x00	; 0
  ac:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(delay);
		
		if (counter >= 255)
		{
			counter = 0;
			Mode = (Mode + 1)%6;
  ae:	0f 2e       	mov	r0, r31
  b0:	f6 e0       	ldi	r31, 0x06	; 6
  b2:	ef 2e       	mov	r14, r31
  b4:	f1 2c       	mov	r15, r1
  b6:	f0 2d       	mov	r31, r0
        
		_delay_ms(delay);
		
		if (counter >= 255)
		{
			counter = 0;
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	10 e0       	ldi	r17, 0x00	; 0
  bc:	0c c0       	rjmp	.+24     	; 0xd6 <main+0x3a>
			Mode = (Mode + 1)%6;
  be:	80 91 66 00 	lds	r24, 0x0066
  c2:	90 91 67 00 	lds	r25, 0x0067
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	b7 01       	movw	r22, r14
  ca:	62 d0       	rcall	.+196    	; 0x190 <__divmodhi4>
  cc:	90 93 67 00 	sts	0x0067, r25
  d0:	80 93 66 00 	sts	0x0066, r24
        
		_delay_ms(delay);
		
		if (counter >= 255)
		{
			counter = 0;
  d4:	e8 01       	movw	r28, r16
			Mode = (Mode + 1)%6;
		}
		switch(Mode)
  d6:	80 91 66 00 	lds	r24, 0x0066
  da:	90 91 67 00 	lds	r25, 0x0067
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	91 05       	cpc	r25, r1
  e2:	b1 f1       	breq	.+108    	; 0x150 <main+0xb4>
  e4:	34 f4       	brge	.+12     	; 0xf2 <main+0x56>
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	f9 f0       	breq	.+62     	; 0x128 <main+0x8c>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	09 f0       	breq	.+2      	; 0xf0 <main+0x54>
  ee:	43 c0       	rjmp	.+134    	; 0x176 <main+0xda>
  f0:	07 c0       	rjmp	.+14     	; 0x100 <main+0x64>
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	91 05       	cpc	r25, r1
  f6:	71 f0       	breq	.+28     	; 0x114 <main+0x78>
  f8:	0c f1       	brlt	.+66     	; 0x13c <main+0xa0>
  fa:	05 97       	sbiw	r24, 0x05	; 5
  fc:	e1 f5       	brne	.+120    	; 0x176 <main+0xda>
  fe:	32 c0       	rjmp	.+100    	; 0x164 <main+0xc8>
		{
			//Rød
			case 1: //Skrue Ned
				RedValue++;
 100:	80 91 64 00 	lds	r24, 0x0064
 104:	90 91 65 00 	lds	r25, 0x0065
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 65 00 	sts	0x0065, r25
 10e:	80 93 64 00 	sts	0x0064, r24
				break;
 112:	31 c0       	rjmp	.+98     	; 0x176 <main+0xda>
			case 4: //Skrue Op
				RedValue--;
 114:	80 91 64 00 	lds	r24, 0x0064
 118:	90 91 65 00 	lds	r25, 0x0065
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	90 93 65 00 	sts	0x0065, r25
 122:	80 93 64 00 	sts	0x0064, r24
				break;
 126:	27 c0       	rjmp	.+78     	; 0x176 <main+0xda>
			//Grøn
			case 0: //Skrue Op
				GreenValue--;
 128:	80 91 62 00 	lds	r24, 0x0062
 12c:	90 91 63 00 	lds	r25, 0x0063
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	90 93 63 00 	sts	0x0063, r25
 136:	80 93 62 00 	sts	0x0062, r24
				break;
 13a:	1d c0       	rjmp	.+58     	; 0x176 <main+0xda>
			case 3: //Skrue Ned
				GreenValue++;
 13c:	80 91 62 00 	lds	r24, 0x0062
 140:	90 91 63 00 	lds	r25, 0x0063
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 63 00 	sts	0x0063, r25
 14a:	80 93 62 00 	sts	0x0062, r24
				break;
 14e:	13 c0       	rjmp	.+38     	; 0x176 <main+0xda>
			//Blå
			case 2: //Skrue Op
				BlueValue--;
 150:	80 91 60 00 	lds	r24, 0x0060
 154:	90 91 61 00 	lds	r25, 0x0061
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	90 93 61 00 	sts	0x0061, r25
 15e:	80 93 60 00 	sts	0x0060, r24
				break;
 162:	09 c0       	rjmp	.+18     	; 0x176 <main+0xda>
			case 5: //Skrue Ned
				BlueValue++;
 164:	80 91 60 00 	lds	r24, 0x0060
 168:	90 91 61 00 	lds	r25, 0x0061
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 61 00 	sts	0x0061, r25
 172:	80 93 60 00 	sts	0x0060, r24
				break;
			default:
				break;		
		}
		UpdateValues();
 176:	6f df       	rcall	.-290    	; 0x56 <UpdateValues>
		counter++;
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	8f e6       	ldi	r24, 0x6F	; 111
 17c:	94 e9       	ldi	r25, 0x94	; 148
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0xe2>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0xe8>
 184:	00 00       	nop
    while(1)
    {
        
		_delay_ms(delay);
		
		if (counter >= 255)
 186:	cf 3f       	cpi	r28, 0xFF	; 255
 188:	d1 05       	cpc	r29, r1
 18a:	0c f0       	brlt	.+2      	; 0x18e <main+0xf2>
 18c:	98 cf       	rjmp	.-208    	; 0xbe <main+0x22>
 18e:	a3 cf       	rjmp	.-186    	; 0xd6 <main+0x3a>

00000190 <__divmodhi4>:
 190:	97 fb       	bst	r25, 7
 192:	07 2e       	mov	r0, r23
 194:	16 f4       	brtc	.+4      	; 0x19a <__divmodhi4+0xa>
 196:	00 94       	com	r0
 198:	06 d0       	rcall	.+12     	; 0x1a6 <__divmodhi4_neg1>
 19a:	77 fd       	sbrc	r23, 7
 19c:	08 d0       	rcall	.+16     	; 0x1ae <__divmodhi4_neg2>
 19e:	0b d0       	rcall	.+22     	; 0x1b6 <__udivmodhi4>
 1a0:	07 fc       	sbrc	r0, 7
 1a2:	05 d0       	rcall	.+10     	; 0x1ae <__divmodhi4_neg2>
 1a4:	3e f4       	brtc	.+14     	; 0x1b4 <__divmodhi4_exit>

000001a6 <__divmodhi4_neg1>:
 1a6:	90 95       	com	r25
 1a8:	81 95       	neg	r24
 1aa:	9f 4f       	sbci	r25, 0xFF	; 255
 1ac:	08 95       	ret

000001ae <__divmodhi4_neg2>:
 1ae:	70 95       	com	r23
 1b0:	61 95       	neg	r22
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255

000001b4 <__divmodhi4_exit>:
 1b4:	08 95       	ret

000001b6 <__udivmodhi4>:
 1b6:	aa 1b       	sub	r26, r26
 1b8:	bb 1b       	sub	r27, r27
 1ba:	51 e1       	ldi	r21, 0x11	; 17
 1bc:	07 c0       	rjmp	.+14     	; 0x1cc <__udivmodhi4_ep>

000001be <__udivmodhi4_loop>:
 1be:	aa 1f       	adc	r26, r26
 1c0:	bb 1f       	adc	r27, r27
 1c2:	a6 17       	cp	r26, r22
 1c4:	b7 07       	cpc	r27, r23
 1c6:	10 f0       	brcs	.+4      	; 0x1cc <__udivmodhi4_ep>
 1c8:	a6 1b       	sub	r26, r22
 1ca:	b7 0b       	sbc	r27, r23

000001cc <__udivmodhi4_ep>:
 1cc:	88 1f       	adc	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	5a 95       	dec	r21
 1d2:	a9 f7       	brne	.-22     	; 0x1be <__udivmodhi4_loop>
 1d4:	80 95       	com	r24
 1d6:	90 95       	com	r25
 1d8:	bc 01       	movw	r22, r24
 1da:	cd 01       	movw	r24, r26
 1dc:	08 95       	ret

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
